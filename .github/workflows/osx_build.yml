# This is a basic workflow to help you get started with Actions

name: Mac OSX builds

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [master]
    paths-ignore:
      - '**/README.md'
  # Stop checking osx build on pull request, one has to check is manually
  pull_request:
    branches-ignore:
      - master

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  osx_build:
    # The type of runner that the job will run on
    runs-on: macos-latest
    if: ${{ !contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]') }}

    env:
      GEODA_VER: '1.22.0'

    # Steps represent a sequence of tasks that will be executed as part of the job

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Install application certificate
        uses: apple-actions/import-codesign-certs@v1
        with:
          keychain: ${{ github.run_id }}
          keychain-password: ${{ github.run_id }}
          p12-file-base64: ${{ secrets.MACOS_CERTIFICATE }}
          p12-password: ${{ secrets.MACOS_CERTIFICATE_PWD }}

      - uses: actions/cache@v3
        id: cache
        with:
          path: |
            BuildTools/macosx/libraries
            /usr/local/Homebrew
            /usr/local/Cellar
            /usr/local/Frameworks
            /usr/local/bin
            /usr/local/opt
          key: ${{ runner.os }}-deps-cache-${{ hashFiles('BuildTools/macosx/install.sh') }}

      - if: steps.cache.outputs.cache-hit != 'true'
        name: Build Dependencies
        run: |
          brew install boost@1.76
          ln -s /usr/local/opt/boost@1.76 /usr/local/opt/boost
          brew install gdal
          mkdir -p BuildTools/macosx/temp
          mkdir -p BuildTools/macosx/libraries
          mkdir -p BuildTools/macosx/libraries/lib
          mkdir -p BuildTools/macosx/libraries/include 
          cd BuildTools/macosx
          export GEODA_HOME=$PWD
          cd temp
          curl -L -O https://github.com/wxWidgets/wxWidgets/releases/download/v3.1.4/wxWidgets-3.1.4.tar.bz2
          tar -xf wxWidgets-3.1.4.tar.bz2
          cd wxWidgets-3.1.4
          ./configure --with-cocoa --with-opengl --enable-postscript --enable-textfile --without-liblzma --enable-webview --enable-cxx11 --enable-webview --disable-mediactrl --enable-webviewwebkit --enable-monolithic --with-libtiff=builtin --with-libpng=builtin --with-libjpeg=builtin --prefix=$GEODA_HOME/libraries
          make
          make install
          make clean
          cd ..
          curl -L -O https://github.com/GeoDaCenter/software/releases/download/v2000/json_spirit_v4.08.zip
          unzip json_spirit_v4.08.zip
          cd json_spirit_v4.08
          cp ../../dep/json_spirit/CMakeLists.txt .
          mkdir -p bld
          cd bld
          cmake -DBoost_NO_BOOST_CMAKE=TRUE -DBOOST_ROOT:PATHNAME=/usr/local/opt ..
          make
          cp -R ../json_spirit ../../../libraries/include/.
          cp json_spirit/libjson_spirit.a ../../../libraries/lib/.
          cd ../..
          cd ../..

      - name: Build GeoDa
        run: |
          cp GeoDamake.macosx.opt GeoDamake.opt
          cd BuildTools
          cd macosx
          export GEODA_HOME=$PWD
          export GEODA_ARCH=x86_64
          echo "find identity"
          security find-identity -v
          echo "start installing..."
          ./install.sh

      # Upload artifact
      - uses: actions/upload-artifact@v2
        with:
          name: GeoDa-${{ env.GEODA_VER }}-MacOS
          path: ${{ github.workspace }}/BuildTools/macosx/create-dmg/GeoDa${{ env.GEODA_VER }}-Installer.dmg
